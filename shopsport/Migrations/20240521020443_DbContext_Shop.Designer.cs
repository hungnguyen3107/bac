// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using shopsport;

#nullable disable

namespace shopsport.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20240521020443_DbContext_Shop")]
    partial class DbContext_Shop
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("shopsport.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("Province_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Province_id");

                    b.ToTable("District", "order");
                });

            modelBuilder.Entity("shopsport.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("District_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("IsPay")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("Province_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Ward_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("District_id");

                    b.HasIndex("Province_id");

                    b.HasIndex("User_id");

                    b.HasIndex("Ward_id");

                    b.ToTable("Order", "order");
                });

            modelBuilder.Entity("shopsport.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", "order");
                });

            modelBuilder.Entity("shopsport.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Image")
                        .HasColumnType("text[]");

                    b.Property<decimal>("InportPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("IsStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductCategory_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PromotionPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("Supplier_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategory_id");

                    b.HasIndex("Supplier_id");

                    b.ToTable("Product", "product");
                });

            modelBuilder.Entity("shopsport.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductCategoriesParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCategoriesParent_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoriesParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("shopsport.Entities.ProductCategoryParent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategoriesParent");
                });

            modelBuilder.Entity("shopsport.Entities.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("shopsport.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Product_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uuid");

                    b.Property<int>("star")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Product_id");

                    b.HasIndex("User_id");

                    b.ToTable("Rating", "order");
                });

            modelBuilder.Entity("shopsport.Entities.Returns", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Order_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("Product_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Order_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Returns", "order");
                });

            modelBuilder.Entity("shopsport.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("shopsport.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("shopsport.Entities.Ward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("District_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("District_id");

                    b.ToTable("Ward", "order");
                });

            modelBuilder.Entity("shopsport.Entities.District", b =>
                {
                    b.HasOne("shopsport.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("Province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("shopsport.Entities.Order", b =>
                {
                    b.HasOne("shopsport.Entities.District", "District")
                        .WithMany("Orders")
                        .HasForeignKey("District_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.Province", "Province")
                        .WithMany("Orders")
                        .HasForeignKey("Province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.Ward", "Ward")
                        .WithMany("Orders")
                        .HasForeignKey("Ward_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Province");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("shopsport.Entities.OrderDetail", b =>
                {
                    b.HasOne("shopsport.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopsport.Entities.Product", b =>
                {
                    b.HasOne("shopsport.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductCategory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("Supplier_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("shopsport.Entities.ProductCategory", b =>
                {
                    b.HasOne("shopsport.Entities.ProductCategoryParent", "ProductCategoriesParent")
                        .WithMany("ProductCategorys")
                        .HasForeignKey("ProductCategoriesParentId");

                    b.Navigation("ProductCategoriesParent");
                });

            modelBuilder.Entity("shopsport.Entities.Rating", b =>
                {
                    b.HasOne("shopsport.Entities.Product", "Products")
                        .WithMany("Ratings")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopsport.Entities.Returns", b =>
                {
                    b.HasOne("shopsport.Entities.Order", "Order")
                        .WithMany("ReturnProducts")
                        .HasForeignKey("Order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopsport.Entities.Product", "Product")
                        .WithMany("ReturnProducts")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopsport.Entities.Ward", b =>
                {
                    b.HasOne("shopsport.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("District_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("shopsport.Entities.District", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("shopsport.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ReturnProducts");
                });

            modelBuilder.Entity("shopsport.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Ratings");

                    b.Navigation("ReturnProducts");
                });

            modelBuilder.Entity("shopsport.Entities.ProductCategory", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("shopsport.Entities.ProductCategoryParent", b =>
                {
                    b.Navigation("ProductCategorys");
                });

            modelBuilder.Entity("shopsport.Entities.Province", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("shopsport.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopsport.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("shopsport.Entities.Ward", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
